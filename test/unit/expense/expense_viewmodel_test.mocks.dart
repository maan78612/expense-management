// Mocks generated by Mockito 5.4.5 from annotations
// in expense_managment/test/unit/expense/expense_viewmodel_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:expense_managment/src/features/expenses/domain/models/expense.dart'
    as _i4;
import 'package:expense_managment/src/features/expenses/domain/repositories/expenses_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ExpensesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpensesRepository extends _i1.Mock
    implements _i2.ExpensesRepository {
  MockExpensesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveExpenses(String? email, _i4.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#saveExpenses, [email, expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.ExpenseModel>> getExpenses(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, [email]),
            returnValue: _i3.Future<List<_i4.ExpenseModel>>.value(
              <_i4.ExpenseModel>[],
            ),
          )
          as _i3.Future<List<_i4.ExpenseModel>>);

  @override
  _i3.Future<void> updateExpense(String? email, _i4.ExpenseModel? expense) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [email, expense]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteExpense(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [id]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
